import { Component, OnInit } from '@angular/core';
import { CarsService } from 'src/app/_services/cars.service';
import { AccountService } from 'src/app/_services/account.service';
import { User } from 'src/app/_models/user';
import { Member } from 'src/app/_models/member';
import { take } from 'rxjs/operators';
import { Car } from 'src/app/_models/car';
import { ToastrService } from 'ngx-toastr';
import { Observable } from 'rxjs';
import { AudiMark, BMWMark, LexusMark, MarkEnum, MercedesMark, Marks } from 'src/app/_enums/cars-data';
import { FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { Validators } from '@angular/forms';
import { MembersService } from 'src/app/_services/members.service';

@Component({
  selector: 'app-car-card',
  templateUrl: './car-card.component.html',
  styleUrls: ['./car-card.component.css'],
})
export class CarCardComponent implements OnInit {
  user: User;
  member: Member;
  profileNewCar: FormGroup;
  cars$: Observable <Car[]>; 
  car: Car;
  public Marks = MarkEnum;
  yearProduction:Number[];
  enumKeys = [];
  carModels:string[];
  carsToRemove: Array<Number> = new Array;

  constructor(private _accoutService: AccountService, private _carsService: CarsService, private _toastr: ToastrService, private memberService: MembersService,
    private fb: FormBuilder) { 
    this._accoutService.currentUser$.pipe(take(1)).subscribe(user => this.user = user);
    this.enumKeys = Object.keys(this.Marks).filter(f => !isNaN(Number(f)));
    this.setYearProduction();
  }

  ngOnInit(): void {
    this.readUserCars();
    this.initializeNewUserCar();
    this.getMember();
  }
  getMember()
  {
    this.memberService.getMember(this.user.username).subscribe(member => {
      this.member = member;
    })
  }
  initializeNewUserCar() {
    this.profileNewCar =this.fb.group({ 
      appUserId: ['0'],
      mark: ['', Validators.required],
      model: ['', Validators.required],
      costBuy: ['', Validators.required],
      yearProduction: ['', Validators.required],
      engine: ['2000', Validators.required],
      mileage: ['186000', Validators.required]
    });
  }
  addUserCar(){ 
      const id = this.member.id;
    this.profileNewCar.controls.appUserId.setValue(id);
    this._carsService.addUserCar(this.profileNewCar.value);
  }
  readUserCars(){ 
    this.cars$ = this._carsService.getUserCars(this.user.username);
  }
  deleteUserCars(){
    console.log("removing");
    
    for(let i = 0; i < this.carsToRemove.length; i++)
    {
      console.log(this.carsToRemove[i]);
      this._carsService.deleteUserCar(this.carsToRemove[i]);      
    }
    this.readUserCars();
  }
  onSelect(markEnum)
  {
    switch(+markEnum)
    {
      case MarkEnum.Audi:     this.carModels = AudiMark;     break;
      case MarkEnum.Mercedes: this.carModels = MercedesMark; break;
      case MarkEnum.Lexus:    this.carModels = LexusMark;    break;
      case MarkEnum.BMW:      this.carModels = BMWMark;     break;
    }    
  }
  setYearProduction()
  {
    var currentYear = new Date().getFullYear();
    this.yearProduction= Array.from(Array(currentYear - 1979).keys()).map(x => x + 1980);
  }
  addCarToRemove($event)//
  {
    const id =$event.target.value; 
    const checked = $event.target.checked;
    
    if(checked === true && !this.carsToRemove.find(element => element === id))
    {
       this.carsToRemove.push(id);  
    }
    else if(checked === false && this.carsToRemove.find(element => element === id))
    { 
      delete this.carsToRemove[this.carsToRemove.findIndex(element => element === id)];
    }
  }
}
