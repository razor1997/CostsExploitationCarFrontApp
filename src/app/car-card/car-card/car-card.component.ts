import { Component, OnInit } from '@angular/core';
import { CarsService } from 'src/app/_services/cars.service';
import { AccountService } from 'src/app/_services/account.service';
import { User } from 'src/app/_models/user';
import { take } from 'rxjs/operators';
import { Car } from 'src/app/_models/car';
import { ToastrService } from 'ngx-toastr';
import { Observable } from 'rxjs';
import { AudiMark, BMWMark, LexusMark, MarkEnum, MercedesMark, Marks } from 'src/app/_enums/cars-data';

@Component({
  selector: 'app-car-card',
  templateUrl: './car-card.component.html',
  styleUrls: ['./car-card.component.css'],
})
export class CarCardComponent implements OnInit {
  user: User;
  cars$: Observable <Car[]>; 
  car: Car;
  public Marks = MarkEnum;
  yearProduction:Number[];
  enumKeys = [];
  carModels:string[];

  constructor(private _accoutService: AccountService, private _carsService: CarsService, private _toastr: ToastrService) { 
    this._accoutService.currentUser$.pipe(take(1)).subscribe(user => this.user = user);
    this.enumKeys = Object.keys(this.Marks).filter(f => !isNaN(Number(f)));
    this.setYearProduction();
  }

  ngOnInit(): void {
    this.cars$ = this._carsService.getCars();
  }
  addUserCar(){
    console.log("start");
    let model, mark:string;
    let yearProduction, costBuy: Number;

    mark = Marks[(<HTMLSelectElement>document.getElementById('mark')).value];
    model = (<HTMLSelectElement>document.getElementById('model')).value;
    costBuy = parseInt((<HTMLInputElement>document.getElementById('costBuy')).value);
    let newCar = {appUserId: 1,costOfBuy: costBuy, mark: mark, model: model, yearProduction:1999};
    console.log(newCar.mark, newCar.costOfBuy);
    this._carsService.addUserCar(newCar);
  }
  readUserCar(){ 
    this.cars$ = this._carsService.getCars();
  }
  deleteUserCar(id: Number){
    this._carsService.deleteUserCar(id);
  }
  onSelect(markEnum)
  {
    switch(+markEnum)
    {
      case MarkEnum.Audi: this.carModels = AudiMark;         break;
      case MarkEnum.Mercedes: this.carModels = MercedesMark; break;
      case MarkEnum.Lexus: this.carModels = LexusMark;       break;
      case MarkEnum.BMW: this.carModels =  BMWMark;          break;
    }    
  }
  setYearProduction()
  {
    var currentYear = new Date().getFullYear();
    this.yearProduction= Array.from(Array(currentYear - 1979).keys()).map(x => x + 1980);
  }
}
